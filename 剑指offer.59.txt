vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        if(nums.empty()) return {};
        int sz=nums.size();
        if(sz<k) return {};
        if(sz==k)
        {
            return {*max_element(nums.begin(),nums.end())};
        }
        vector<int> ret;
        deque<int> win;
        for(int i=0;i<k;++i)
        {
            if(win.empty()) win.push_back(i);
            else{
                while(!win.empty()&&nums[win.back()]<=nums[i])
                {
                    win.pop_back();
                }
                win.push_back(i);
            }
        }
        int r=k;
        ret.push_back(nums[win.front()]);
        while(r<nums.size())
        {
            // cout << r << ret.back();
            //update
            while(!win.empty()&&nums[win.back()]<=nums[r])
            {
                win.pop_back();
            }
            win.push_back(r);

            //remove
            while(r-win.front()>=k)
            {
                win.pop_front();
            }

            ret.push_back(nums[win.front()]);
            r++;
        }
        return ret;
    }